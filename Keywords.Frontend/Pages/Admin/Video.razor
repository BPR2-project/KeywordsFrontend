@page "/admin/video/{VideoId:guid}"
@using Keywords.Services.Interfaces
@using Keywords.API.Client.Generated
@inject IKeywordService _keywordService
@inject ISwapVideoService _videoService
@inject IIndexerService _indexerService

<PageTitle>Video</PageTitle>
@if (_video != null)
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Videos" Path="/admin" Style="color: black"/>
        <RadzenBreadCrumbItem Text="Video overview"/>
    </RadzenBreadCrumb>

    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem" Style="margin-top: 15px">
        <RadzenStack Style="width:70%;" Orientation="Orientation.Horizontal" >
            <RadzenStack>
                <div class="col-md-9">
                    <RadzenHtml>
                        <video controls width="250" style="width: 300px;">
                            <source src="@_video.VideoLink" type="video/mp4">
                        </video>
                    </RadzenHtml>
                </div>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Vertical" Style="margin-left: 15px">
                <RadzenText><b>Title: </b>@_video.Name</RadzenText>
                <RadzenText><b>Description: </b> @_video.Description</RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenCard>Hello</RadzenCard>
                    <RadzenCard>Number Views</RadzenCard>
                    <RadzenCard></RadzenCard>
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
        <RadzenStack>
            @if (_keywords != null)

            {
                <RadzenText Text="Select keywords" TextStyle="TextStyle.Subtitle2"/>
                <RadzenStack Style="width:350px;" Gap="0.2rem">
                    @foreach (var keyword in _keywords.Keywords)
                    {
                        <RadzenStack Orientation="Orientation.Vertical">

                            <RadzenCard Style="cursor: pointer;">
                                <RadzenStack Orientation="Orientation.Horizontal">
                                    <RadzenLabel Style="width:65%;">@(keyword.Content)</RadzenLabel>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                        <RadzenLabel Text="Publish"/>
                                        <RadzenSwitch Change=@(args => ChangePublishState(keyword)) Value="@keyword.IsPublished"/>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenStack>
                    }
                    <RadzenPager Density="Density.Compact" ShowPagingSummary="true" PagingSummaryFormat="" HorizontalAlign="HorizontalAlign.Center" Count="@_count" PageSize="@pageSize" PageNumbersCount="4" PageChanged="@PageChanged"/>
                </RadzenStack>
            }
            else if (_indexerProgress != null)
            {
                <h3>Processing video</h3>
                <p><strong>Status: @_indexerProgress.State</strong></p>
                <RadzenProgressBarCircular Style="height: 100px; width: 100px;" ProgressBarStyle="ProgressBarStyle.Primary" @bind-Value="@_progress" Mode="ProgressBarMode.Indeterminate"/>

            }
            else
            {
                <RadzenLabel Text="Oops, no keywords yet."/>
                <RadzenButton Disabled="@_disableIndexButton" Text="Index" ButtonStyle="ButtonStyle.Primary" Click="IndexVideo"/>
            }
        </RadzenStack>
    </RadzenStack>
    }
else
{
    <RadzenProgressBarCircular Style="height: 100px; width: 100px;" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate"/>
}

@code
{
    [Parameter]
    public Guid VideoId { get; set; }

    private SwapVideos.API.Client.Generated.Video? _video;
    IndexerProgress? _indexerProgress;
    private double _progress;
    private PaginatedKeywordsResponse? _keywords;
    private int _count;
    private int _currentPage;
    private bool _disableIndexButton;
    int pageSize = 10;
    string pagingSummaryFormat = "(total {2} keywords)";


    protected override async Task OnParametersSetAsync()
    {
        await IndexerTrigger();
    }
    
    private async Task GetKeywordsAsync()
    {
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = 0,
            Size = pageSize,
            VideoId = VideoId
        };
        try
        {
            _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
            _count = _keywords.TotalAmount;
        }
        catch (ApiException e) when (e.StatusCode == 404)
        {
            try
            {
                _indexerProgress = await _indexerService.GetIndexerProgressAsync(VideoId);
                _progress = ToDouble(_indexerProgress.ProcessingProgress);
            }
            catch (ApiException ex) when (ex.StatusCode == 404)
            {
                 // Ignored
            }
        }
    }

    private async Task IndexerTrigger()
    {
        _video = await _videoService.GetVideoAsync(VideoId);
        await GetKeywordsAsync();

        if (_keywords != null || _indexerProgress == null)
        {
            return;
        }
        await InvokeAsync(StateHasChanged);
        using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(5));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            _indexerProgress = await _indexerService.GetIndexerProgressAsync(VideoId);
            _progress = ToDouble(_indexerProgress.ProcessingProgress);
            if (_indexerProgress.State is IndexerProgressState.Succeeded)
            {
                await GetKeywordsAsync();
                await InvokeAsync(StateHasChanged);
                break;
            }

            await InvokeAsync(StateHasChanged);
            if (_indexerProgress.State is IndexerProgressState.Failed)
            {
                break;
            }
        }
    }

    private async Task IndexVideo()
    {
        if (_video?.Id != null)
        {
            await _indexerService.IndexVideoAsync(_video.Id.Value, _video.VideoLink);
            _disableIndexButton = true;
            _indexerProgress = await _indexerService.GetIndexerProgressAsync(VideoId);
            await IndexerTrigger();
        }
    }

    private static double ToDouble(string? progress)
    {
        var toConvert = progress?.Trim('%');
        if (double.TryParse(toConvert, out var result))
        {
            return result;
        }
        return 98;
    }

    private async void PageChanged(PagerEventArgs args)
    {
        _currentPage = args.PageIndex;
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = args.PageIndex,
            Size = args.Top,
            VideoId = VideoId
        };
        _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangePublishState(Keyword keyword)
    {
        var keywordId = keyword.Id;
        keyword.IsPublished = !keyword.IsPublished;
        await _keywordService.PublishKeywordAsync(keywordId, keyword.IsPublished);
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = _currentPage,
            Size = pageSize,
            VideoId = VideoId
        };
        _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
    }
}