@page "/admin/video/{VideoId:guid}"
@using Keywords.Services.Interfaces
@using Keywords.API.Client.Generated
@inject IKeywordService _keywordService
@inject ISwapVideoService _videoService
@inject IIndexerService _indexerService

<PageTitle>Video</PageTitle>
@if (_video != null)
{
    <h1>@_video.Name</h1>
    <p>Description: @_video.Description</p>
                                       
    @if (_keywords != null)
    {
        <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right" Count="@_count" PageSize="@pageSize" PageNumbersCount="5" PageChanged="@PageChanged"/>
        @foreach (var keyword in _keywords.Keywords)
        {
            <RadzenStack Orientation="Orientation.Vertical">
                
                <RadzenCard Style="width:100%; cursor: pointer; margin-top: 3px;">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenLabel Style="width:50%;">@(keyword.Content)</RadzenLabel>
                         <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                <RadzenLabel Text="Publish" />
                                <RadzenSwitch  Change=@(args =>  ChangePublishState(keyword)) Value="@keyword.IsPublished!.Value" />
                            </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenStack>
   
        }
        <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right" Count="@_count" PageSize="@pageSize" PageNumbersCount="5" PageChanged="@PageChanged"/>
    }
    else if (_indexerResponse != null)
    {
        <h3>Processing video</h3>
        <p><strong>Status: @_indexerResponse.State</strong></p>
        <RadzenProgressBarCircular Style="height: 100px; width: 100px;" ProgressBarStyle="ProgressBarStyle.Secondary" @bind-Value="@_progress" Mode="ProgressBarMode.Indeterminate"/>

    }
    else
    {
        <button type="button" class="btn btn-lg btn-primary" @onclick="IndexVideo">Index</button>
    }
}
else
{
    <h1>Loading</h1>
}

@code
{
    [Parameter]
    public Guid VideoId { get; set; }

    private SwapVideos.API.Client.Generated.Video? _video;
    IndexerResponse? _indexerResponse;
    private double _progress;
    private PaginatedKeywordsResponse? _keywords;
    private int _count;
    private int _currentPage;
    int pageSize = 10;
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} keywords)";


    private async Task GetKeywordsAsync()
    {
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = 0,
            Size = pageSize,
            VideoId = VideoId
        };
        try
        {
            _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
            _count = _keywords.TotalAmount ?? 0;
        }
        catch (ApiException e) when (e.StatusCode == 404)
        {
            try
            {
                _indexerResponse = await _indexerService.GetIndexerResponseAsync(VideoId);
                _progress = ToDouble(_indexerResponse.ProcessingProgress);
            }
            catch (ApiException ex) when (ex.StatusCode == 404)
            {
    // Ignored
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await IndexerTrigger();
    }

    private async Task IndexerTrigger()
    {
        _video = await _videoService.GetVideoAsync(VideoId);
        await GetKeywordsAsync();

        if (_keywords != null || _indexerResponse == null)
        {
            return;
        }

        await InvokeAsync(StateHasChanged);
        using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(5));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            _indexerResponse = await _indexerService.GetIndexerResponseAsync(VideoId);
            _progress = ToDouble(_indexerResponse.ProcessingProgress);
            if (_indexerResponse.State is IndexerResponseState.Succeeded)
            {
                await GetKeywordsAsync();
                await InvokeAsync(StateHasChanged);
                break;
            }

            await InvokeAsync(StateHasChanged);
            if (_indexerResponse.State is IndexerResponseState.Failed)
            {
                break;
            }
        }
    }

    private async Task IndexVideo()
    {
        if (_video?.Id != null)
        {
            await _indexerService.IndexVideoAsync(_video.Id.Value, _video.VideoLink);
            _indexerResponse = await _indexerService.GetIndexerResponseAsync(VideoId);
            await IndexerTrigger();
        }
    }

    private static double ToDouble(string? progress)
    {
        var toConvert = progress?.Trim('%');
        if (double.TryParse(toConvert, out var result))
        {
            return result;
        }
        return 98;
    }

    private async void PageChanged(PagerEventArgs args)
    {
        _currentPage = args.PageIndex;
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = args.PageIndex,
            Size = args.Top,
            VideoId = VideoId
        };
        _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangePublishState(Keyword keyword)
    {
        var keywordId = keyword.Id ?? new Guid();
        keyword.IsPublished = !keyword.IsPublished;
        await _keywordService.PublishKeywordAsync(keywordId, keyword.IsPublished);
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = _currentPage,
            Size = pageSize,
            VideoId = VideoId
        };
        _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
    }
}