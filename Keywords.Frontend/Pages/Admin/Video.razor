@page "/admin/video/{VideoId:guid}"
@using Keywords.Services.Interfaces
@using Keywords.API.Client.Generated
@inject IKeywordService _keywordService
@inject ISwapVideoService _videoService
@inject IIndexerService _indexerService
<PageTitle>Video</PageTitle>

@if (_video != null)
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Videos" Path="/admin" Style="color: black"/>
        <RadzenBreadCrumbItem Text="Video overview"/>
    </RadzenBreadCrumb>
    <RadzenStack Orientation="Orientation.Horizontal" Style="margin-top: 2%" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenStack  Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                <RadzenStack>
                    <div class="col-md-9">
                        <RadzenHtml>
                            <video controls width="400" >
                                <source src="@_video.VideoLink" type="video/mp4">
                            </video>
                        </RadzenHtml>
                    </div>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Style="margin-left: 15px">
                    <RadzenText TextStyle="TextStyle.H6"><b>Title: </b>@_video.Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>Description: </b> @_video.Description</RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenCard>Hello</RadzenCard>
                        <RadzenCard>Number Views</RadzenCard>
                        <RadzenCard>Looks bad</RadzenCard>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Gap="0.3rem">
                <RadzenText TextStyle="TextStyle.H6">Published Keywords</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">Total: @_publishedKeywords.Count</RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem" Wrap="FlexWrap.Wrap">
                    @foreach (var keyword in _publishedKeywords)
                    {
                        <RadzenCard Style="background-color: #F1F5F9">
                            <RadzenLabel> @keyword.Content</RadzenLabel>
                        </RadzenCard>
                    }
                </RadzenStack>
            </RadzenStack>
    </RadzenStack>
        <RadzenStack AlignItems="AlignItems.Start">
            @if (_keywords != null)

            {
                <div style="border-color: #48494A;">
                <RadzenText Text="Select keywords to publish" TextStyle="TextStyle.H6"/>
                
                <RadzenStack Gap="0.2rem" Style="height: 50%; overflow: auto" >
                    @foreach (var keyword in _keywords.Keywords.Where(x => !x.IsPublished))
                    {
                        <RadzenStack Orientation="Orientation.Vertical">

                            <RadzenCard Style="cursor: pointer;">
                                <RadzenStack Orientation="Orientation.Horizontal">
                                    <RadzenLabel Style="width:85%;">@(keyword.Content)</RadzenLabel>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                        <RadzenSwitch Change=@(args => ChangePublishState(keyword)) Value="@keyword.IsPublished"/>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenStack>
                    }
                    <RadzenPager Density="Density.Compact" ShowPagingSummary="true" PagingSummaryFormat="" Count="@_count" PageSize="@pageSize" PageNumbersCount="4" PageChanged="@PageChanged"/>
                </RadzenStack>
                </div>
              
            }
            else if (_indexerProgress != null)
            {
                <h3>Processing video</h3>
                <p><strong>Status: @_indexerProgress.State</strong></p>
                <RadzenProgressBarCircular Style="height: 100px; width: 100px;" ProgressBarStyle="ProgressBarStyle.Primary" @bind-Value="@_progress" Mode="ProgressBarMode.Indeterminate"/>

            }
            else
            {
                <RadzenLabel Text="Oops, no keywords yet."/>
                <RadzenButton Disabled="@_disableIndexButton" Text="Index" ButtonStyle="ButtonStyle.Primary" Click="IndexVideo"/>
            }
        </RadzenStack>
    </RadzenStack>
    
    }
else
{
    <RadzenProgressBarCircular Style="height: 100px; width: 100px;" ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate"/>
}

@code
{
    [Parameter]
    public Guid VideoId { get; set; }

    private SwapVideos.API.Client.Generated.Video? _video;
    IndexerProgress? _indexerProgress;
    private double _progress;
    private PaginatedKeywordsResponse? _keywords;
    private int _count;
    private int _currentPage;
    private bool _disableIndexButton;
    private int pageSize = 50;
    private string pagingSummaryFormat = "(total {2} keywords)";
    private List<Keyword> _publishedKeywords = new();


    protected override async Task OnParametersSetAsync()
    {
        await IndexerTrigger();
    }

    private async Task GetKeywordsAsync()
    {
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = 0,
            Size = pageSize,
            VideoId = VideoId
        };
        try
        {
            _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
            _publishedKeywords = _keywords.Keywords.Where(keyword => keyword.IsPublished).ToList();
            _count = _keywords.TotalAmount;
        }
        catch (ApiException e) when (e.StatusCode == 404)
        {
            try
            {
                _indexerProgress = await _indexerService.GetIndexerProgressAsync(VideoId);
                _progress = ToDouble(_indexerProgress.ProcessingProgress);
            }
            catch (ApiException ex) when (ex.StatusCode == 404)
            {
    // Ignored
            }
        }
    }

    private async Task IndexerTrigger()
    {
        _video = await _videoService.GetVideoAsync(VideoId);
        await GetKeywordsAsync();

        if (_keywords != null || _indexerProgress == null)
        {
            return;
        }
        await InvokeAsync(StateHasChanged);
        using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(5));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            _indexerProgress = await _indexerService.GetIndexerProgressAsync(VideoId);
            _progress = ToDouble(_indexerProgress.ProcessingProgress);
            if (_indexerProgress.State is IndexerProgressState.Succeeded)
            {
                await GetKeywordsAsync();
                await InvokeAsync(StateHasChanged);
                break;
            }

            await InvokeAsync(StateHasChanged);
            if (_indexerProgress.State is IndexerProgressState.Failed)
            {
                break;
            }
        }
    }

    private async Task IndexVideo()
    {
        if (_video?.Id != null)
        {
            await _indexerService.IndexVideoAsync(_video.Id.Value, _video.VideoLink);
            _disableIndexButton = true;
            _indexerProgress = await _indexerService.GetIndexerProgressAsync(VideoId);
            await IndexerTrigger();
        }
    }

    private static double ToDouble(string? progress)
    {
        var toConvert = progress?.Trim('%');
        if (double.TryParse(toConvert, out var result))
        {
            return result;
        }
        return 98;
    }

    private async void PageChanged(PagerEventArgs args)
    {
        _currentPage = args.PageIndex;
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = args.PageIndex,
            Size = args.Top,
            VideoId = VideoId
        };
        _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
        _publishedKeywords = _keywords.Keywords.Where(x => x.IsPublished).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangePublishState(Keyword keyword)
    {
        var keywordId = keyword.Id;
        keyword.IsPublished = !keyword.IsPublished;
        await _keywordService.PublishKeywordAsync(keywordId, keyword.IsPublished);
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = _currentPage,
            Size = pageSize,
            VideoId = VideoId
        };
        _keywords = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
        _publishedKeywords = _keywords.Keywords.Where(x => x.IsPublished).ToList();
    }
}