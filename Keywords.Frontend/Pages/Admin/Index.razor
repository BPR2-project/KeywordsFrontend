@page "/admin"
@using Keywords.Services.Interfaces
@inject ISwapVideoService _videoService
@inject NavigationManager Navigation

<PageTitle>Videos</PageTitle>

<RadzenDataList WrapItems="true" AllowPaging="false" Data="@videos" TItem="SwapVideos.API.Client.Generated.Video">
    <Template Context="video">
        <RadzenCard Style="width:300px; cursor: pointer;" @onclick="() => ViewVideoDetails(video.Id)">
            <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(video?.Name)</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Description</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(video?.Description)</b></RadzenText>
            </RadzenStack>
        </RadzenCard>
    </Template>
</RadzenDataList>

<RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right" Count="count" PageSize="@pageSize" PageNumbersCount="5" PageChanged="@PageChanged" />
@code {
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} videos)";
    int pageSize = 2;
    int count;
    IEnumerable<SwapVideos.API.Client.Generated.Video> videos;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        videos = await GetAllVideosAsync(0, pageSize);
    }

    private async void PageChanged(PagerEventArgs args)
    {
        videos = await GetAllVideosAsync(args.PageIndex, args.Top);
        await InvokeAsync(StateHasChanged);
    }

    private void ViewVideoDetails(Guid? videoId)
    {
        Navigation.NavigateTo($"/admin/video/{videoId}");
    }

    private async Task<IEnumerable<SwapVideos.API.Client.Generated.Video>> GetAllVideosAsync(int? page, int size)
    {
        var response = await _videoService.GetVideoAsync(page, size);
        count = response.TotalAmount ?? 0;
        return response.Videos;
    }
}