@inject IJSRuntime JS
@using Keywords.Services.Interfaces
@using Keywords.API.Client.Generated
@using Keywords.Frontend.Pages.Users.Shared
@inject IKeywordService KeywordService
@inject ISpeechService SpeechService
@inject DialogService DialogService
@using Keywords.API.Client.Generated
@using Keywords.Services

<RadzenStack Gap="1.5rem">
                <p>Practice your pronunciation of <b>@_assessmentDto</b></p>
                <p>Pronunciation Assessment: @_assessmentDto</p>
                <div class="container-fluid d-flex flex-row justify-content-evenly">
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Secondary" Value="@(_assessmentDto != null ? _assessmentDto.Confidence : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium"><Template>Confidence</Template></RadzenProgressBarCircular>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Danger" Value="@(_assessmentDto != null ? _assessmentDto.CompletenessScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                        <Template>Completeness</Template>
                    </RadzenProgressBarCircular>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success" Value="@(_assessmentDto != null ? _assessmentDto.AccuracyScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                        <Template>Accuracy</Template>
                    </RadzenProgressBarCircular>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Light" Value="@(_assessmentDto != null ? _assessmentDto.FluencyScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                        <Template>Fluency</Template>
                    </RadzenProgressBarCircular>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="@(_assessmentDto != null ? _assessmentDto.PronScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                        <Template>Pronunciation</Template>
                    </RadzenProgressBarCircular>
                </div>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Record" ButtonStyle="ButtonStyle.Primary" id="@string.Concat(Keyword.Id,"start")" />
                        @* <button id="recording-button" class="btn btn-primary" type="button" @onclick="() => RecordAudio(id, keyword)" style="background-color: darkorange; color: white;"> *@
                        @*     RECORD *@
                        @* </button> *@
                        <RadzenButton Text="Close" ButtonStyle="ButtonStyle.Light" Click="@OnCloseButtonClick"/>
                        <RadzenButton Text="Play Recording" ButtonStyle="ButtonStyle.Light" id="@string.Concat(Keyword.Id, "play")"/>
                        @* <RadzenButton Text="Record" ButtonStyle="ButtonStyle.Primary" id="@string.Concat(id, "start")" Click="@RefreshAssessments"/> *@
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>, new DialogOptions() {ShowClose = false});
@code {
    [Parameter] 
    public PronunciationAssessmentDTO? _assessmentDto { get; set; }
    [Parameter]
    public DotNetObjectReference<AssessmentModal>? dotnetRef { get; set; }
    [Parameter]
    public Keyword? Keyword { get; set; }
    
    [Parameter]
    public EventCallback OnCloseButtonClicked { get; set; }
    
    private List<Keyword> _keywords;
    private bool _isAssessed;
    string assessedKeyWord;
    int score;
    bool recording = false;
    private string assessment;
    private AssessmentModal _assessmentModal;

    protected override void OnInitialized()
    {
        _assessmentDto = null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotnetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("player.recording", dotnetRef, Keyword.Id);
        }
    }
    
    [JSInvokable]
    public async Task Receive(Guid id)
    {
        recording = false;
        var dataReference =
            await JS.InvokeAsync<IJSStreamReference>("fileDataStream");
        using var dataReferenceStream =
            await dataReference.OpenReadStreamAsync(maxAllowedSize: 10_000_000);

        var keyword = _keywords.First(a => a.Id == id);

        using (var stream = new MemoryStream())
        {
            await dataReferenceStream.CopyToAsync(stream);
            Console.Write(stream.Length);
            stream.Seek(0, SeekOrigin.Begin);
            var result = await SpeechService.CreatePronunciationAssessmentAsync(stream, keyword.Language, keyword.Content);
            score = (int) result.NBest[0].PronScore;
            _assessmentDto = result.NBest.FirstOrDefault();
            Console.Write(score);
            assessment = score > 80 ? "Great Job" : "Try again";
            DialogService.Refresh();
        }
    }
    
    private void RefreshAssessments()
    {
        _assessmentDto = null;
        StateHasChanged();
    }

    private async Task OnCloseButtonClick()
    {
        DialogService.Close();
        await OnCloseButtonClicked.InvokeAsync();
    }

}