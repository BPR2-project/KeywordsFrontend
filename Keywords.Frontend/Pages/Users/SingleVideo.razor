@page "/video"
@using Keywords.Services.Interfaces
@using Keywords.API.Client.Generated
@inject IKeywordService KeywordService
@inject IJSRuntime JS
@inject ISpeechService SpeechService
@inject DialogService DialogService

<div class="py-3 px-2 py-lg-4 px-lg-5" style="background-color:rgb(248 250 252);">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Language Lessons"/>
        <RadzenBreadCrumbItem Text="Module 1"/>
        <RadzenBreadCrumbItem Text="Video Title"/>
    </RadzenBreadCrumb>
    <div class="mt-4 mt-lg-5 w-100">
        <div class="mx-auto d-flex flex-column flex-lg-row justify-content-center">
            <div class="me-0 me-lg-3 mb-3">
                <h4 class="fw-bolder">Video title</h4>
                <h6 class="mb-4">description</h6>
                <div class="text-center rounded-3" style="aspect-ratio: 16/9; background-color: black; color: white; min-height: 400px;">
                    <div class="d-flex flex-column justify-content-center align-items-center h-100">
                        <RadzenText Text="Video lesson" TextStyle="TextStyle.H5" Style="color: white"/>
                        <RadzenButton Text="Sign Up" ButtonType="ButtonType.Button" Style="background-color: darkorange; color: white;">Watch Now</RadzenButton>
                    </div>
                </div>
            </div>
            <div class="ms-0 ms-lg-4 d-flex flex-column" style="min-width: 250px;">
                <h6 style="color: darkorange">Coming up next</h6>
                <h5 class="fw-bolder mb-4">Module: Title</h5>
                <div class="d-none d-lg-block" style="max-height: 400px; overflow-y: scroll;">
                    <RadzenStack Orientation="Orientation.Vertical">
                        @for (int i = 0; i < 10; i++)
                        {
                            <div class="d-flex flex-row mb-3">
                                <div class="text-center rounded-3 d-block m" style="aspect-ratio: 16/9; background-color: black; color: white; height: 70px; cursor: pointer;"></div>
                                <div class="d-flex flex-column ms-2">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text">Lesson</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption">Module </RadzenText>
                                </div>
                            </div>
                        }
                    </RadzenStack>
                </div>
                <div class="d-block d-lg-none mb-4" style="overflow-x: scroll;">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        @for (int i = 0; i < 10; i++)
                        {
                            <div class="d-flex flex-row mb-3">
                                <div class="text-center rounded-3 d-block m" style="aspect-ratio: 16/9; background-color: black; color: white; height: 70px; cursor: pointer;"></div>
                                <div class="d-flex flex-column ms-2">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text">Lesson</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption">Module</RadzenText>
                                </div>
                            </div>
                        }
                    </RadzenStack>
                </div>
            </div>
        </div>
    </div>
</div>
<RadzenTabs Style="min-height: 300px;">
    <Tabs>
        <RadzenTabsItem Text="Overview" Style="width: 33.33%;">
            <span>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras nibh risus, facilisis quis ipsum ut, posuere posuere sapien. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer aliquet porttitor enim, venenatis imperdiet diam fermentum a. In at purus sodales, tincidunt justo nec, condimentum magna. Sed scelerisque in libero vel rutrum. Nunc ac metus ac est finibus bibendum sit amet iaculis nisl. Nunc finibus fermentum nisi.
                <br/>
                <br/>
                Nam iaculis ornare nunc quis tincidunt. Curabitur posuere sodales ex, at fringilla purus condimentum ut. Nullam rhoncus justo finibus vehicula mattis. Vestibulum sit amet erat quam. Vivamus in sapien in metus faucibus molestie. Donec ac convallis leo, id molestie elit. Mauris in augue a nisl tristique venenatis. Etiam ut hendrerit leo. Fusce sollicitudin suscipit dui ac vulputate. Nam tellus ligula, congue at diam id, sodales pretium diam. Vivamus suscipit pellentesque euismod.
                <br/>
                <br/>
                Aenean eros nunc, posuere in lectus at, dictum condimentum erat. Cras risus ex, porttitor in massa in, efficitur pharetra est. In eget sem vitae arcu euismod fringilla sit amet vel justo. Pellentesque congue metus vel tincidunt rutrum. Vivamus nisi urna, porttitor a enim in, laoreet aliquet sem. Quisque luctus diam a risus posuere, quis vehicula tortor tincidunt. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum hendrerit sit amet sem non gravida.
            </span>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Keywords" Style="width: 33.33%; text-align: center">
            <p>Click on a keyword to practice your pronunciation.</p>
            <div class="d-flex justify-content-between flex-wrap">
                @foreach (var keyword in _keywords!)
                {
                    <div class="d-inline-block mx-5 my-3">
                        <span class="ps-2 keyword" @onclick="@(() => OpenRecordingDialog(keyword))" Style="cursor: pointer;">@keyword.Content</span>
                    </div>
                }
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="About Teacher" Style="width: 33.33%; text-align: center">
            <h4 class="fw-bold mt-3 mb-3">Lorem ipsum</h4>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras nibh risus, facilisis quis ipsum ut, posuere posuere sapien. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer aliquet porttitor enim, venenatis imperdiet diam fermentum a. In at purus sodales, tincidunt justo nec, condimentum magna. Sed scelerisque in libero vel rutrum. Nunc ac metus ac est finibus bibendum sit amet iaculis nisl. Nunc finibus fermentum nisi.
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    private List<Keyword> _keywords;
    private DotNetObjectReference<SingleVideo>? dotnetRef;
    private bool _isAssessed;
    Keyword assessedKeyWord;
    int score;
    bool recording;
    private string assessment;
    private PronunciationAssessmentDTO? _assessmentDto;
    private bool _disabled;
    private bool _jsInitialized;


    protected override async Task OnInitializedAsync()
    {
        recording = false;
        _disabled = true;
        _assessmentDto = null;
        _keywords = new List<Keyword>();
        assessment = "";

        Guid.TryParse("212ced62-0fda-4d02-b4e9-6d9b76122780", out var guid);
        var response = await KeywordService.GetAllKeywordsByVideoIdAsync(new PaginatedKeywordsRequest()
        {
            VideoId = guid,
            Published = true
        });
        _keywords = response.Keywords;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            dotnetRef = DotNetObjectReference.Create(this);
    }

    private async Task PlayAudio(string source, Guid id)
    {
        await JS.InvokeVoidAsync("player.play", source, id);
    }

    private async Task OpenRecordingDialog(Keyword keyword)
    {
        assessedKeyWord = keyword;
        var result = await DialogService.OpenAsync("Pronunciation Practice", ds =>
            @<RadzenStack >
                <div class="d-flex align-items-start" style="margin-bottom: -5%">
                    <p>Practice your pronunciation of <b>@assessedKeyWord.Content</b></p>
                    <img src="audio.svg" alt="audio" @onclick="@(() => PlayAudio(assessedKeyWord.AudioLink, assessedKeyWord.Id))" id="@assessedKeyWord.Id" Style="margin-left: 1%; cursor: pointer; filter: invert(4%) sepia(4%) saturate(7492%) hue-rotate(169deg) brightness(95%) contrast(77%)"/>
                </div>
                <div style="margin-bottom: -5%">
                    <p>Record yourself to get your pronunciation assessment.</p>
                </div>
                <div>
                    <p>Once you click RECORD, you have 3 seconds to record your voice.</p>
                </div>
                <div class="container">
                    <div class="row">
                        <div class="col d-flex justify-content-center">
                        </div>
                        <div class="col d-flex justify-content-center">
                            <p>Total Score</p>
                        </div>
                        <div class="col d-flex justify-content-center">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex justify-content-center">
                        </div>
                        <div class="col d-flex justify-content-center">
                            <RadzenProgressBarCircular Style="height: 80px; width: 80px;" ProgressBarStyle="ProgressBarStyle.Primary" Value="@(_assessmentDto != null ? _assessmentDto.PronScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(!recording ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                                <p style="font-size: 100px">@((int) _assessmentDto.PronScore)</p>
                            </RadzenProgressBarCircular>
                        </div>
                        <div class="col d-flex justify-content-center">
                        </div>
                    </div>
                </div>
                <div class="container">
                    <div class="row">
                        <div class="col d-flex justify-content-center">
                            <p>Accuracy</p>
                        </div>
                        <div class="col d-flex justify-content-center">
                            <p>Fluency</p>
                        </div>
                        <div class="col d-flex justify-content-center">
                            <p>Completeness</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex justify-content-center">
                            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="@(_assessmentDto != null ? _assessmentDto.CompletenessScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(!recording ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                                <Template>@string.Concat((int) _assessmentDto.CompletenessScore, "%")</Template>
                            </RadzenProgressBarCircular>
                        </div>
                        <div class="col d-flex justify-content-center">
                            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="@(_assessmentDto != null ? _assessmentDto.AccuracyScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(!recording ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                                <Template>@string.Concat((int) _assessmentDto.AccuracyScore, "%")</Template>
                            </RadzenProgressBarCircular>
                        </div>
                        <div class="col d-flex justify-content-center">
                            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="@(_assessmentDto != null ? _assessmentDto.FluencyScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(!recording ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                                <Template>@string.Concat((int) _assessmentDto.FluencyScore, "%")</Template>
                            </RadzenProgressBarCircular>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-center">
                @if (assessment != "")
                {
                    <p style="font-size: 40px; margin-top: 4%">@assessment</p>
                }
                else
                {
                    <div style="height: 100px"></div>
                }
                </div>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Record" ButtonStyle="ButtonStyle.Primary" id="@string.Concat(keyword.Id, "start")" Click="@(() => RefreshAssessments(keyword.Id))"/>
                        <RadzenButton Text="Play Recording" Style="background: #1E293B" id="@string.Concat(keyword.Id, "play")" Disabled="@_disabled"/>
                        <RadzenButton Text="Close" Click="@CloseModal" ButtonStyle="ButtonStyle.Light"/>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>, new DialogOptions() {ShowClose = false, Height = "605px"});
    }

    private async Task RecordAudio(Guid id)
    {
        await JS.InvokeVoidAsync("player.recording", dotnetRef, id);
    }

    [JSInvokable]
    public async Task Receive(Guid id, string blobUrl)
    {
        recording = false;
        var dataReference =
            await JS.InvokeAsync<IJSStreamReference>("fileDataStream", blobUrl);

        using (var dataReferenceStream =
            await dataReference.OpenReadStreamAsync(maxAllowedSize: 10_000_000))
        {
            var keyword = _keywords.First(a => a.Id == id);

            var stream = new MemoryStream();

            await dataReferenceStream.CopyToAsync(stream);
            stream.Seek(0, SeekOrigin.Begin);
            var result = await SpeechService.CreatePronunciationAssessmentAsync(stream, keyword.Language, keyword.Content);
            score = (int) result.NBest[0].PronScore;
            _assessmentDto = result.NBest.FirstOrDefault();
            _disabled = false;
            assessment = score > 80 ? "Great Job!" : "Try Again";
            DialogService.Refresh();
        }
    }

    private async Task RefreshAssessments(Guid id)
    {
        _assessmentDto = null;
        if (!_jsInitialized)
            await RecordAudio(id);

        _jsInitialized = true;
        recording = true;
        DialogService.Refresh();
    }

    public async Task CloseModal()
    {
        _jsInitialized = false;
        assessment = "";
        DialogService.Close(false);
        _assessmentDto = null;
        _disabled = true;
    }

    public void Dispose()
    {
        dotnetRef.Dispose();
    }

}