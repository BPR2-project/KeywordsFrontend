@page "/video"
@using Keywords.Services.Interfaces
@using Keywords.API.Client.Generated
@inject IKeywordService KeywordService
@inject IJSRuntime JS
@inject ISpeechService SpeechService
@inject DialogService DialogService

<div class="py-3 px-2 py-lg-4 px-lg-5" style="background-color:rgb(248 250 252);">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Language Lessons"/>
        <RadzenBreadCrumbItem Text="Module 1"/>
        <RadzenBreadCrumbItem Text="Video Title"/>
    </RadzenBreadCrumb>
    <div class="mt-4 mt-lg-5 w-100">
        <div class="mx-auto d-flex flex-column flex-lg-row justify-content-center">
            <div class="me-0 me-lg-3 mb-3">
                <h4 class="fw-bolder">Video title</h4>
                <h6 class="mb-4">description</h6>
                <div class="text-center rounded-3" style="aspect-ratio: 16/9; background-color: black; color: white; min-height: 400px;">
                    <div class="d-flex flex-column justify-content-center align-items-center h-100">
                        <RadzenText Text="Video lesson" TextStyle="TextStyle.H5" Style="color: white"/>
                        <RadzenButton Text="Sign Up" ButtonType="ButtonType.Button" Style="background-color: darkorange; color: white;">Watch Now</RadzenButton>
                    </div>
                </div>
            </div>
            <div class="ms-0 ms-lg-4 d-flex flex-column" style="min-width: 250px;">
                <h6 style="color: darkorange">Coming up next</h6>
                <h5 class="fw-bolder mb-4">Module: Title</h5>
                <div class="d-none d-lg-block" style="max-height: 400px; overflow-y: scroll;">
                    <RadzenStack Orientation="Orientation.Vertical">
                        @for (int i = 0; i < 10; i++)
                        {
                            <div class="d-flex flex-row mb-3">
                                <div class="text-center rounded-3 d-block m" style="aspect-ratio: 16/9; background-color: black; color: white; height: 70px; cursor: pointer;"></div>
                                <div class="d-flex flex-column ms-2">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text">Lesson</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption">Module </RadzenText>
                                </div>
                            </div>
                        }
                    </RadzenStack>
                </div>
                <div class="d-block d-lg-none mb-4" style="overflow-x: scroll;">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        @for (int i = 0; i < 10; i++)
                        {
                            <div class="d-flex flex-row mb-3">
                                <div class="text-center rounded-3 d-block m" style="aspect-ratio: 16/9; background-color: black; color: white; height: 70px; cursor: pointer;"></div>
                                <div class="d-flex flex-column ms-2">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="body-text">Lesson</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption">Module</RadzenText>
                                </div>
                            </div>
                        }
                    </RadzenStack>
                </div>
            </div>
        </div>
    </div>
</div>
<RadzenTabs Style="min-height: 300px;">
    <Tabs>
        <RadzenTabsItem Text="Overview" Style="width: 25%;">
            <span>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras nibh risus, facilisis quis ipsum ut, posuere posuere sapien. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer aliquet porttitor enim, venenatis imperdiet diam fermentum a. In at purus sodales, tincidunt justo nec, condimentum magna. Sed scelerisque in libero vel rutrum. Nunc ac metus ac est finibus bibendum sit amet iaculis nisl. Nunc finibus fermentum nisi.
                <br/>
                <br/>
                Nam iaculis ornare nunc quis tincidunt. Curabitur posuere sodales ex, at fringilla purus condimentum ut. Nullam rhoncus justo finibus vehicula mattis. Vestibulum sit amet erat quam. Vivamus in sapien in metus faucibus molestie. Donec ac convallis leo, id molestie elit. Mauris in augue a nisl tristique venenatis. Etiam ut hendrerit leo. Fusce sollicitudin suscipit dui ac vulputate. Nam tellus ligula, congue at diam id, sodales pretium diam. Vivamus suscipit pellentesque euismod.
                <br/>
                <br/>
                Aenean eros nunc, posuere in lectus at, dictum condimentum erat. Cras risus ex, porttitor in massa in, efficitur pharetra est. In eget sem vitae arcu euismod fringilla sit amet vel justo. Pellentesque congue metus vel tincidunt rutrum. Vivamus nisi urna, porttitor a enim in, laoreet aliquet sem. Quisque luctus diam a risus posuere, quis vehicula tortor tincidunt. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum hendrerit sit amet sem non gravida.
            </span>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Keywords" Style="width: 25%; text-align: center">
            <p>Click on the microphone next to the keywords to practice your pronunciation. Word being assessed: @assessedKeyWord | Pronunciation Score: @score</p>
            <div class="d-flex justify-content-between flex-wrap">
                @foreach (var keyword in _keywords!)
                {
                    <div class="d-inline-block mx-5 my-3">
                        <span class="ps-2" >@keyword.Content</span>
                        <img src="audio.svg" alt="audio" @onclick="@(() => PlayAudio(keyword.AudioLink, keyword.Id))" id="@keyword.Id" Style="cursor: pointer; filter: invert(4%) sepia(4%) saturate(7492%) hue-rotate(169deg) brightness(95%) contrast(77%)"/>
                        <img src="mic.svg" alt="record" @onclick="@(() => OpenRecordingDialog(keyword.Id, keyword.Content))" Style="cursor: pointer; filter: invert(4%) sepia(4%) saturate(7492%) hue-rotate(169deg) brightness(95%) contrast(77%)"/>
                    </div>
                }
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Practice" Style="width: 25%; text-align: center"> 
        </RadzenTabsItem>
        <RadzenTabsItem Text="About Teacher" Style="width: 25%; text-align: center">
            <h4 class="fw-bold mt-3 mb-3">Lorem ipsum</h4>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras nibh risus, facilisis quis ipsum ut, posuere posuere sapien. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer aliquet porttitor enim, venenatis imperdiet diam fermentum a. In at purus sodales, tincidunt justo nec, condimentum magna. Sed scelerisque in libero vel rutrum. Nunc ac metus ac est finibus bibendum sit amet iaculis nisl. Nunc finibus fermentum nisi.
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    private List<Keyword> _keywords;
    private DotNetObjectReference<SingleVideo>? dotnetRef;
    private bool _isAssessed;
    string assessedKeyWord;
    int score;
    bool recording = false;
    private string assessment;
    private PronunciationAssessmentDTO? _assessmentDto;

    protected override async Task OnInitializedAsync()
    {
        _assessmentDto = null;
        _keywords = new List<Keyword>();

        Guid.TryParse("998f1901-99f0-418e-82c1-c18ba368d295", out var guid);
        var response = await KeywordService.GetAllKeywordsByVideoIdAsync(new PaginatedKeywordsRequest()
        {
            VideoId = guid,
            Published = true
        });
        _keywords = response.Keywords;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            dotnetRef = DotNetObjectReference.Create(this);
    }

    private async Task PlayAudio(string source, Guid id)
    {
        await JS.InvokeVoidAsync("player.play", source, id);
    }

    private async Task OpenRecordingDialog(Guid id, string keyword)
    {
        assessedKeyWord = keyword;
        var result = await DialogService.OpenAsync("Pronunciation Practice", ds =>
            @<RadzenStack Gap="1.5rem">
                <p>Practice your pronunciation of <b>@assessedKeyWord</b></p>
                <p>Pronunciation Assessment: @assessment</p>
                <div class="container-fluid d-flex flex-row justify-content-evenly">
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Secondary" Value="@(_assessmentDto != null ? _assessmentDto.Confidence : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium"><Template>Confidence</Template></RadzenProgressBarCircular>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Danger" Value="@(_assessmentDto != null ? _assessmentDto.CompletenessScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                        <Template>Completeness</Template>
                    </RadzenProgressBarCircular>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success" Value="@(_assessmentDto != null ? _assessmentDto.AccuracyScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                        <Template>Accuracy</Template>
                    </RadzenProgressBarCircular>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Light" Value="@(_assessmentDto != null ? _assessmentDto.FluencyScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                        <Template>Fluency</Template>
                    </RadzenProgressBarCircular>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="@(_assessmentDto != null ? _assessmentDto.PronScore : 100)" ShowValue="@(_assessmentDto != null)" Mode="@(_assessmentDto != null ? ProgressBarMode.Determinate : ProgressBarMode.Indeterminate)" Size="ProgressBarCircularSize.Medium">
                        <Template>Pronunciation</Template>
                    </RadzenProgressBarCircular>
                </div>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        @* <RadzenButton Text="Record" ButtonStyle="ButtonStyle.Primary" id="@string.Concat(id,"start")" Click="@RefreshAssessments"/> *@
                        <button id="recording-button" class="btn btn-primary" type="button" @onclick="() => RecordAudio(id)" style="background-color: darkorange; color: white;">
                            RECORD
                        </button>
                        <RadzenButton Text="Close" Click="@CloseModal" ButtonStyle="ButtonStyle.Light"/>
                        <RadzenButton Text="Play Recording" ButtonStyle="ButtonStyle.Light" id="@string.Concat(id, "play")"/>
                        <RadzenButton Text="Record" ButtonStyle="ButtonStyle.Primary" id="@string.Concat(id, "start")" Click="@RefreshAssessments"/>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>, new DialogOptions() {ShowClose = false});
    }

    private async Task RecordAudio(Guid id)
    {
        await JS.InvokeVoidAsync("player.changeButton");
        await JS.InvokeVoidAsync("player.recording", dotnetRef, id);
    }

    [JSInvokable]
    public async Task Receive(Guid id)
    {
        recording = false;
        var dataReference =
            await JS.InvokeAsync<IJSStreamReference>("fileDataStream");
        using var dataReferenceStream =
            await dataReference.OpenReadStreamAsync(maxAllowedSize: 10_000_000);

        var keyword = _keywords.First(a => a.Id == id);

        using (var stream = new MemoryStream())
        {
            await dataReferenceStream.CopyToAsync(stream);
            Console.Write(stream.Length);
            stream.Seek(0, SeekOrigin.Begin);
            var result = await SpeechService.CreatePronunciationAssessmentAsync(stream, keyword.Language, keyword.Content);
            score = (int) result.NBest[0].PronScore;
            _assessmentDto = result.NBest.FirstOrDefault();
            Console.Write(score);
            assessment = score > 80 ? "Great Job" : "Try again";
            DialogService.Refresh();
        }
    }

    private void RefreshAssessments()
    {
        _assessmentDto = null;
        StateHasChanged();
    }

    public async Task CloseModal()
    {
        assessment = "";
        DialogService.Close(false);
        _assessmentDto = null;
    }

    public void Dispose()
    {
        dotnetRef.Dispose();
    }

}