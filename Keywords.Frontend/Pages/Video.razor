@page "/video/{VideoId:guid}"
@page "/video/{VideoId:guid}/{Page:int}"
@using Keywords.Services.Interfaces
@using Keywords.API.Client.Generated
@inject IKeywordService _keywordService
@inject ISwapVideoService _videoService
@inject IIndexerService _indexerService
@using Radzen
@using Radzen.Blazor
@using System.Drawing

<PageTitle>Video</PageTitle>
@if (_video != null)
{
    <h1>@_video.Name</h1>
    <p>Description: @_video.Description</p>
    @if (_keywords != null)
    {
        <p>Indexed</p>
        <p>Keywords:</p>
        @foreach (var keyword in _keywords)
        {
            <p>@keyword.Content</p>
        }
        
        <div class="d-flex justify-content-center">
            @for (var i = 1; i <= _totalPages; i++)
            {
                @if (i == Page)
                {
                    <span>@i|</span>
                }
                else
                {
                    <span><a href="/video/@VideoId/@i">@i</a>|</span>   
                }
            }
        </div>
    }
    else if (_indexerResponse != null)
    {
        <h3>Processing video</h3>
        <p><strong>Status: @_indexerResponse.State</strong></p>
        <RadzenProgressBarCircular Style="height: 100px; width: 100px;" ProgressBarStyle="ProgressBarStyle.Secondary" @bind-Value="@_progress" Mode="ProgressBarMode.Indeterminate" />

    }
    else
    {
        <button type="button" class="btn btn-lg btn-primary" @onclick="IndexVideo">Index</button>
    }
}
else
{
    <h1>Loading</h1>
}

@code
{
    [Parameter]
    public Guid VideoId { get; set; }
    [Parameter]
    public int? Page { get; set; }
    
    private SwapVideos.API.Client.Generated.Video? _video;
    IndexerResponse? _indexerResponse;
    private double _progress;
    private int? _totalPages;
    private IList<Keyword>? _keywords;

    private async Task GetKeywordsAsync()
    {
        var keywordsRequest = new PaginatedKeywordsRequest
        {
            Page = Page > 1 ? Page - 1 : 0,
            Size = 10,
            VideoId = VideoId
        };
        try
        {
            var keywordsResponse = await _keywordService.GetAllKeywordsByVideoIdAsync(keywordsRequest);
            Page = keywordsResponse.CurrentPage + 1;
            _totalPages = keywordsResponse.TotalAmountOfPages;
            _keywords = keywordsResponse.Keywords;
        }
        catch (ApiException e) when(e.StatusCode == 404)
        {
            try
            {
                _indexerResponse = await _indexerService.GetIndexerResponseAsync(VideoId);
                _progress = ToDouble(_indexerResponse.ProcessingProgress);
            }
            catch (ApiException ex) when(ex.StatusCode == 404)
            {
                // Ignored
            }
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await IndexerTrigger();
    }

    private async Task IndexerTrigger()
    {
        _video = await _videoService.GetVideoAsync(VideoId);
        await GetKeywordsAsync();

        if (_keywords != null || _indexerResponse == null)
        {
            return;
        }

        await InvokeAsync(StateHasChanged);
        using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(10));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            _indexerResponse = await _indexerService.GetIndexerResponseAsync(VideoId);
            _progress = ToDouble(_indexerResponse.ProcessingProgress);
            if (_indexerResponse.State is IndexerResponseState.Succeeded)
            {
                await GetKeywordsAsync();
                await InvokeAsync(StateHasChanged);
                break;
            }

            await InvokeAsync(StateHasChanged);
            if (_indexerResponse.State is IndexerResponseState.Failed)
            {
                break;
            }
        }
    }

    private async Task IndexVideo()
    {
        if (_video?.Id != null)
        {
            await _indexerService.IndexVideoAsync(_video.Id.Value, _video.VideoLink);
            await IndexerTrigger();
        }
    }

    private static double ToDouble(string? progress)
    {
        var toConvert = progress?.Trim('%');
        if (double.TryParse(toConvert, out var result))
        {
            return result;
        }
        return 0;
    }
}